diff --git a/node_modules/rn-range-slider/index.d.ts b/node_modules/rn-range-slider/index.d.ts
new file mode 100644
index 0000000..f92736b
--- /dev/null
+++ b/node_modules/rn-range-slider/index.d.ts
@@ -0,0 +1 @@
+declare module 'rn-range-slider';
\ No newline at end of file
diff --git a/node_modules/rn-range-slider/index.js b/node_modules/rn-range-slider/index.js
index c054f07..8f748c5 100644
--- a/node_modules/rn-range-slider/index.js
+++ b/node_modules/rn-range-slider/index.js
@@ -1,10 +1,10 @@
 import React, { memo, useState, useEffect, useCallback, useMemo, useRef } from 'react';
-import { Animated, PanResponder, View, ViewPropTypes } from 'react-native';
+import { Animated, PanResponder, View, ViewProps } from 'react-native';
 import PropTypes from 'prop-types';
 
 import styles from './styles';
-import {useThumbFollower, useLowHigh, useWidthLayout, useLabelContainerProps, useSelectedRail} from './hooks';
-import {clamp, getValueForPosition, isLowCloser} from './helpers';
+import { useThumbFollower, useLowHigh, useWidthLayout, useLabelContainerProps, useSelectedRail } from './hooks';
+import { clamp, getValueForPosition, isLowCloser } from './helpers';
 
 const trueFunc = () => true;
 
@@ -77,20 +77,20 @@ const Slider = (
 
   const handleContainerLayout = useWidthLayout(containerWidthRef, updateThumbs);
   const handleThumbLayout = useCallback(({ nativeEvent }) => {
-    const { layout: {width}} = nativeEvent;
+    const { layout: { width } } = nativeEvent;
     if (thumbWidth !== width) {
       setThumbWidth(width);
     }
   }, [thumbWidth]);
 
   const lowStyles = useMemo(() => {
-    return {transform: [{translateX: lowThumbX}]};
+    return { transform: [{ translateX: lowThumbX }] };
   }, [lowThumbX]);
 
   const highStyles = useMemo(() => {
     return disableRange ? null : [
       styles.highThumbContainer,
-      {transform: [{translateX: highThumbX}]},
+      { transform: [{ translateX: highThumbX }] },
     ];
   }, [disableRange, highThumbX]);
 
@@ -195,14 +195,14 @@ const Slider = (
             {highThumb}
           </Animated.View>
         }
-        <View { ...panHandlers } style={styles.touchableArea} collapsable={false}/>
+        <View {...panHandlers} style={styles.touchableArea} collapsable={false} />
       </View>
     </View>
   );
 };
 
 Slider.propTypes = {
-  ...ViewPropTypes,
+  ...ViewProps,
   min: PropTypes.number.isRequired,
   max: PropTypes.number.isRequired,
   minRange: PropTypes.number,
